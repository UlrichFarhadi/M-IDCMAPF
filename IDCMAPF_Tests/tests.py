# Library imports
import matplotlib.pyplot as plt
import networkx as nx
import sys
import os
import random
import copy
import cProfile
import pstats
import numpy as np
from typing import List, Tuple, Callable


# Self made imports

# Get the path of the current script
script_dir = os.path.dirname(os.path.abspath(__file__))
# Add the parent directory of the current script to the Python path
parent_dir = os.path.abspath(os.path.join(script_dir, '..'))
sys.path.append(parent_dir)

from Map.map import Map
from Map.map_directed import Map_directed
#from Map.map import * # DÃ¥rlig kodeskik at importere en hel fil
from Agent.agent import Agent
from Agent.IDCMAPF_agent import IDCMAPF_agent
from Swarm.swarm import Swarm
from Swarm.swarm_IDCMAPF import Swarm_IDCMAPF
from Renderer.renderer import Renderer
from Simulator.simulator import Simulator
from Logger.logger import Logger

from GA.GA_Rules import GA_Priority_rules


def test1():
    
    # Define starting positions
    start_list = [(0,0), (4,0)]
    # Define target positions
    target_list = [(0,10), (4,10)]  

    # Create the map object
    map = Map()
    # Import the environment
    env = "Environments/test_map.map"
    map.generate_map(env)

    # Create the swarm object
    swarm = Swarm_IDCMAPF(map, len(start_list), agent_type=IDCMAPF_agent)

    # Create the renderer object
    renderer = Renderer(map)

    # Create the simulator object
    simulator = Simulator(map, swarm, renderer, display=True, max_timestep=15, positions_for_agents=[start_list, target_list])

    simulator.main_loop()

    renderer.create_animation('Animations/testanimation.mp4', fps=5)




def test_opposite():
    # Define starting positions
    start_list = [(2,2), (17,2)]
    # Define target positions
    target_list = [(17,2), (2,2)]  

    # Create the map object
    map = Map()
    # Import the environment
    env = "Environments/opposite_test.map"
    map.generate_map(env)

    # Create the swarm object
    swarm = Swarm_IDCMAPF(map, len(start_list), agent_type=IDCMAPF_agent)

    # Create the renderer object
    renderer = Renderer(map)

    # Create the simulator object
    simulator = Simulator(map, swarm, renderer, display=True, max_timestep=20, positions_for_agents=[start_list, target_list])

    simulator.main_loop()

    renderer.create_animation('opposite_test.mp4', fps=1)

def test_intersection():
    # Define starting positions
    start_list = [(12, 10), (12,12) , (11,11) , (13,11)]
    # Define target positions
    target_list = [(12,14), (12,8), (15,11), (9,11) ]  

    # Create the map object
    map = Map()
    # Import the environment
    env = "Environments/test_map.map"
    map.generate_map(env)

    # Create the swarm object
    swarm = Swarm_IDCMAPF(map, len(start_list), agent_type=IDCMAPF_agent)

    # Create the renderer object
    renderer = Renderer(map, delay=0.2)

    # Create the simulator object
    simulator = Simulator(map, swarm, renderer, display=True, max_timestep=20, positions_for_agents=[start_list, target_list])

    simulator.main_loop()

    #renderer.create_animation('Testvideos/intersection_test.mp4', fps=1)


def test_follower():
        # Define starting positions
    start_list = [ (2,2) , (3,2)]
    # Define target positions
    target_list = [ (17,2), (16,2) ]  

    # Create the map object
    map = Map()
    # Import the environment
    env = "Environments/follower_test.map"
    map.generate_map(env)

    # Create the swarm object
    swarm = Swarm_IDCMAPF(map, len(start_list), agent_type=IDCMAPF_agent)

    # Create the renderer object
    renderer = Renderer(map, delay=0.2)

    # Create the simulator object
    simulator = Simulator(map, swarm, renderer, display=True, max_timestep=20, positions_for_agents=[start_list, target_list])

    simulator.main_loop()

    renderer.create_animation('Testvideos/follower_test.mp4', fps=1)


def bug_hunting():
            # Define starting positions
    start_list = [(30, 3), (22, 16), (24, 30), (19, 8), (17, 1), (16, 14), (22, 12), (15, 7), (28, 28), (10, 21), (23, 7), (21, 18), (22, 8), (15, 6), (12, 17), (18, 5), (6, 19), (18, 30), (3, 31), (0, 26), (14, 16), (3, 5), (29, 25), (5, 17), (2, 18), (6, 30), (26, 3), (5, 30), (12, 16), (13, 1), (9, 30), (18, 28), (8, 14), (12, 10), (15, 30), (29, 12), (28, 13), (18, 4), (17, 10), (21, 25), (20, 4), (3, 15), (12, 29), (16, 10), (1, 31), (24, 29), (7, 27), (13, 28), (2, 8), (26, 26), (26, 10), (31, 7), (18, 16), (9, 15), (17, 27), (19, 13), (29, 26), (16, 28), (26, 11), (4, 3), (14, 6), (0, 0), (13, 2), (31, 21), (23, 14), (27, 15), (25, 12), (21, 6), (31, 4), (18, 1)]
    # Define target positions
    target_list = [(2, 30), (16, 0), (8, 1), (21, 13), (21, 1), (14, 26), (25, 0), (26, 21), (16, 31), (2, 4), (26, 26), (0, 6), (16, 1), (6, 31), (24, 29), (26, 1), (25, 27), (12, 25), (10, 19), (22, 0), (10, 26), (5, 27), (10, 3), (22, 20), (23, 16), (9, 25), (4, 14), (27, 4), (16, 20), (9, 29), (31, 11), (6, 20), (6, 26), (18, 12), (31, 24), (5, 11), (13, 9), (19, 7), (24, 15), (30, 4), (2, 2), (9, 8), (5, 29), (27, 11), (15, 6), (4, 16), (3, 30), (15, 20), (29, 16), (15, 30), (14, 10), (4, 21), (13, 17), (11, 29), (2, 1), (29, 21), (5, 18), (10, 27), (19, 5), (18, 22), (0, 3), (6, 12), (4, 24), (25, 1), (21, 26), (24, 9), (4, 20), (1, 17), (3, 16), (3, 21)]
    # Create the map object
    map = Map()
    # Import the environment
    env = "Environments/random-32-32-10.map"
    map.generate_map(env)

    # Create the swarm object
    swarm = Swarm_IDCMAPF(map, 70, agent_type=IDCMAPF_agent)

    # Create the renderer object
    renderer = Renderer(map, delay=0.0001)

    # Create the simulator object
    simulator = Simulator(map, swarm, renderer, display=True, max_timestep=100,positions_for_agents=[start_list, target_list])

    simulator.main_loop()

    renderer.create_animation('Testvideos/bug_test.mp4', fps=1)



def big_intersection_conflict():
            # Define starting positions
    start_list = [  (7,2), (9,2), (8,3), (8,1),(8,2)]
    # Define target positions
    target_list = [  (10,2), (6,2) , (8,0) , (8,4) ,(8,2)]  

    # Create the map object
    map = Map()
    # Import the environment
    env = "Environments/big_intersection_conflict.map"
    map.generate_map(env)

    # Create the swarm object
    swarm = Swarm_IDCMAPF(map, len(start_list), agent_type=IDCMAPF_agent)

    # Create the renderer object
    renderer = Renderer(map, delay=0.2)

    # Create the simulator object
    simulator = Simulator(map, swarm, renderer, display=True, max_timestep=100, positions_for_agents=[start_list, target_list])

    simulator.main_loop()

    renderer.create_animation('Testvideos/___.mp4', fps=1)


def Raouf1():
            # Define starting positions
    start_list = [(2,3),(4,3),(5,3),(3,4),(1,0),(4,7)]
    # Define target positions
    target_list = [(3,8),(3,5),(3,6),(3,0),(3,2),(3,1)]  

    # Create the map object
    map = Map()
    # Import the environment
    env = "Environments/Raouf1.map"
    map.generate_map(env)

    # Create the swarm object
    swarm = Swarm_IDCMAPF(map, len(start_list), agent_type=IDCMAPF_agent)

    # Create the renderer object
    renderer = Renderer(map, delay=0.1, fig_size_factor=4, node_size=160, linewidth=0.5, dpi=100)

    # Create the simulator object
    simulator = Simulator(map, swarm, renderer, display=True, max_timestep=100, positions_for_agents=[start_list, target_list])
    logger = Logger(simulator)
    simulator.main_loop()
    logger.log()
    logger.save_to_csv("Logs/raouf1.csv")

    renderer.create_animation('Testvideos/Raouf1.mp4', fps=1)

def Raouf2():
            # Define starting positions
    start_list = [(5,3),(7,3),(8,3),(4,3),(3,3),(9,3)]
    # Define target positions
    target_list = [(6,5),(6,2),(6,6),(6,1),(6,0),(6,7)]

    # Create the map object
    map = Map()
    # Import the environment
    env = "Environments/Raouf2.map"
    map.generate_map(env)

    # Create the swarm object
    swarm = Swarm_IDCMAPF(map, len(start_list), agent_type=IDCMAPF_agent)

    # Create the renderer object
    renderer = Renderer(map, delay=0.1, fig_size_factor=4, node_size=160, linewidth=0.5, dpi=40)

    # Create the simulator object
    simulator = Simulator(map, swarm, renderer, display=True, max_timestep=100, positions_for_agents=[start_list, target_list])

    simulator.main_loop()

    renderer.create_animation('Testvideos/Raouf2.mp4', fps=1)

def Raouf3():
            # Define starting positions
    start_list = [ (5,3), (7,3), (8,3), (4,3), (3,3), (9,3)]
    # Define target positions
    target_list = [ (10,3), (2,3), (1,3), (11,3), (11,4), (0,3)]  
    #start_list = [ (5,3), (4,3), (7,3), (8,3)]
    #Define target positions
    #target_list = [ (10,3), (3,3), (2,3), (1,3)]

    # Create the map object
    map = Map()
    # Import the environment
    env = "Environments/Raouf3.map"
    map.generate_map(env)

    # Create the swarm object
    swarm = Swarm_IDCMAPF(map, len(start_list), agent_type=IDCMAPF_agent)

    # Create the renderer object
    renderer = Renderer(map, delay=0.1, fig_size_factor=4, node_size=160, linewidth=0.5, dpi=40)

    # Create the simulator object
    simulator = Simulator(map, swarm, renderer, display=True, max_timestep=100, positions_for_agents=[start_list, target_list])

    simulator.main_loop()

    renderer.create_animation('Testvideos/Raouf3.mp4', fps=1)

def agents500_warehouse_10_20_10_2_2():
    # Create the map object
    map = Map()
    # Import the environment
    #env = "Environments/random-32-32-10.map"
    #env = "Environments/test_map.map"
    env = "Environments/warehouse-10-20-10-2-2.map"
    map.generate_map(env)

    # Create the swarm object
    #swarm = Swarm_IDCMAPF(map, len(positions[0]), agent_type=IDCMAPF_agent)
    swarm = Swarm_IDCMAPF(map, 500, agent_type=IDCMAPF_agent)
    #swarm = Swarm(map, 10, agent_type=DCMAPF_agent)

    # Create the renderer object
    renderer = Renderer(map, delay=0.0001, fig_size_factor=15, node_size=12, linewidth=0.5, dpi=40)

    # Create the simulator object
    simulator = Simulator(map, swarm, renderer, display=True, max_timestep=1000)

    simulator.main_loop()

    renderer.create_animation('Testvideos/agents500_warehouse_10_20_10_2_2.mp4', fps=5)

def agents200_random_32_32_20(rule_order=[0,5,4,3,1,2,6], start_target_positions=[], fluid=False, display=False):
    # Create the map object
    #map = Map()
    map = Map_directed()
    # Import the environment
    env = "Environments/random-32-32-20.map"
    #env = "Environments/test_map.map"
    #env = "Environments/warehouse-10-20-10-2-2.map"
    map.generate_map(env)
    if fluid:
        map.update_weight_on_map([0.6397929923002548, 0.5236052499079265, 0.6984068826389918, 0.5, 0.3260656744520062, 0.5624583033176855, 1, 0.7425900600031501, 0.5, 0.2208702231852827, 0.23681319773346432, 0.2872860438389985, 0, 0.5787959936353352, 0.5546459729821528, 0.027739569652217688, 0.9133437511162967, 0.6148232575695005, 0.9530195569904492, 0.1404299239103654, 0.6017938589212259, 0.09440957499358135, 0.44165150149969057, 0.27831716379505006, 0.32964033468594117, 0, 0, 0.3417285322943353, 0.4260389148172568, 0.5089171171007661, 0.5421243116519411, 0.13190005531506094, 1, 0.09304127829599754, 0.5, 0.3707978658257719, 0, 0.36877363413335273, 0.5, 0.30709450035209074, 0.20867213633382997, 0, 0.5, 0.6094832095598527, 5.9254240639461386e-05, 0.4442444356801217, 0.6129092284475921, 0.8167229125421942, 0.8882522343773869, 0.2818577227764667, 0.6591267241752529, 0.5161048422931317, 0.5910575712121776, 0.7376753845249719, 0.5888051093871228, 0.5470220581368875, 0.6374080544665711, 0.7042142638400084, 0.5612045013659497, 0.6025588267997499, 0.5939837034268389, 0.45324377629287466, 0.27602308880780047, 0.4050255821637852, 0.5, 0.4779506251708118, 0.5628348455888557, 0.22988125273488047, 0.7025440875559888, 0.6715195574910964, 0.5, 0.29190891648564765, 0.7562693282107967, 0.32123789798079494, 0.2690185455214208, 0.5, 0.5, 0.5670492677080776, 0.3557075474139242, 0.5364671355281663, 0.8171279496768575, 0.5, 0.24890855651315574, 0.5, 0.3921723991048885, 0.6733735535699936, 0.835175095620281, 0.4250847497938726, 0.08702883531455691, 0.9308540540876798, 0.36162744978262706, 0.9078405967597019, 0.05382666567272981, 0.548082671916445, 0.5726859067763824, 0.3898306566270811, 0.5, 0.59032807546362, 0.6802239666765586, 0.20695510845619813, 0.4949120907857725, 0.6398742414413496, 0.8014085333272368, 0.6446126051574635, 0.5903016565195325, 0.9090113766102126, 0.6462513436906228, 0.34209287525363324, 0.6382918149881878, 0.20907585067107404, 0.6482716193693473, 0.5, 0.5, 0.1257617458062073, 0.32460659977961276, 0.6239164454161479, 0.40656009693941897, 0.5255110929221278, 0.31458742453259736, 0.9581021356155611, 0.4599950440176886, 0.4200299463849581, 0.0015204357473075358, 0.8126784548434345, 0.5, 0.04021040746749448, 0.7111712207641437, 0.5197228838889076, 0.7272373516362217, 0.5, 0.37704862017736696, 0.27831292329046453, 0.3206275924478682, 0.3203635277994098, 1, 0.5781006260152028, 0.18103757627725545, 0.551586310119051, 0.3186103059122808, 0.3611451190086575, 0.8840479112381292, 0.373156072743436, 0.49800455523164167, 0.07001143509815944, 0.4940218118130771, 0.2069336617589032, 0.6314703007843295, 0.34206883769081264, 0.5, 0.6249850485670922, 0.6239643955134028, 0.9520237185442295, 0.5688637149190223, 0.37215195895558256, 0.2858094319089115, 0.6665135333260915, 0.5827306690956523, 0.3912272674599083, 0.41969370139192075, 0.22280326501209535, 0.506058148997944, 0.5823397820908748, 0.07243510929688224, 0.7915248959716, 0, 0.3628325684193273, 0.3098824137713697, 0.8111866919140024, 0.7797931811060526, 0.5018557317005127, 0, 0.6946274984195991, 0.6645496212277715, 0.7119110901263247, 0.3594754786712839, 0.09994507635732533, 0.7228566584637279, 0.5, 0.3943075227511488, 0.581536860303275, 0.5, 0.21544599335511805, 0.32072631413801334, 0.08467010953343278, 0.7483041697385446, 0.6568908645440705, 0.9746180822992075, 0.5, 0.8050352633651574, 0.25350738967856257, 0.5939864984393017, 0.6077367792964637, 0.39142239650700367, 0.37029180942575934, 0.3305954271121236, 0, 0.5433724943160915, 0.6354770795753535, 1, 1, 0.6926340042835191, 0.246930276630641, 0.5645131772599051, 0.8505264396553225, 0.570291158927848, 0.43052844818128316, 0.7925478071198928, 0.20910288118870501, 0.6096164861504006, 0.3999603770377257, 0.3784759669961998, 0.426423510042902, 0.2608034346244027, 0.5, 0.6172096593774079, 0.698081440695775, 0.5, 0.5798560100431471, 0.8565372265100781, 0.3808697350926435, 0.31494824639339697, 0.45445476415026115, 0.5917271673299161, 0.5695319664613762, 0.5276217177336802, 0.9030632458467234, 0.6708620400086462, 0.5, 0.5655171945326941, 0.47318411690476087, 0.47419173480237736, 0.58550362860136, 0.29565860841231295, 0.8529733368862666, 0.49788853833463736, 0.5576542459479391, 0.702026798776813, 0.5328789273486043, 0.9203867899622576, 0.033604049364416244, 0.5, 0.899250024413094, 0.5, 0.44470851970584013, 0.7087362058562532, 0.5, 0.769880345311829, 0.6876339134129761, 0.3498797773072024, 0.4785936016189382, 0.9459880538048084, 0.4570115889865441, 0.6038913833520133, 0.6719147186845055, 0.4211513620980754, 0.5265931930251693, 0.6649724827545674, 0.45624575716847643, 0.5666895465147778, 0.5, 0.3848343564197849, 0.35391024259085396, 0.29323907519770237, 0.3492070793902279, 0.9857834748612309, 0.5, 0.6406086797471279, 0.5918892322457118, 0.3514676735355472, 0.34261656211003516, 0.49568156932500484, 0.5919894447421407, 0.9065851994347266, 0.8444591189540414, 0.6996897871545659, 0.705544628431473, 0.22316595504910083, 0.4420255528979835, 0.11111674213003347, 0.3810932939636922, 0.562114628300113, 0.7844648896158868, 0.5030407357196504, 0.5, 0.567346168675072, 0.5, 0.5, 0.3538622396051342, 0.35679359809997957, 0.5633615831362289, 0.6773784510607073, 0.38689064222979075, 0.5, 0.16907885739939357, 0.9222180037315139, 0.4680741706195617, 0.4772777289101772, 0.5193124620512605, 0.5, 0, 0.5, 0.19862897863588097, 1, 0.5, 0, 0.6455093060096901, 0.3316512001418953, 0.29324238780610234, 0.44532715973898807, 1, 0.7462394860795706, 0, 0.07602183447502846, 0.4605241137400997, 0.9902458391402468, 0.5, 0.6161714709541534, 0.374245340907056, 0.7219715382410594, 0.3578690668309167, 0.5, 0.5, 0.5, 0.5, 0.6522487484343225, 0.676636503712112, 0.8071593217454113, 0.76617374352336, 0.8807657833433609, 0.7530952303209939, 0.2709369412142094, 0.2002815824534218, 0.6414328712685111, 0, 0.5029771520095851, 0.5639609542036599, 0.4348675782114343, 0.5161317594259623, 0.4388397669475669, 0.35189298472308106, 0.39914971288937107, 0.60832263410305, 0.595699400316342, 0.3661717320029704, 0.3105547367291427, 0.3196339151244285, 0.5181953698924944, 0.3553141028060183, 0.42621612541060655, 0.6750338319892991, 0.5, 0.6323631525586215, 0.582459828502712, 0.6834046296361614, 0.39786139166878765, 0.6329190720582865, 0.7702982223244909, 0.454545807471925, 0.6391916835267326, 0.9167309995723577, 0.7773100064578006, 0.5375454315383296, 0.5786623618433318, 0.31663917538331343, 0.6867776187759668, 0.20871270920596607, 0.21396989086445992, 0.5543867326798231, 0.39104813778346037, 0.3189914909472611, 0.649986612911418, 0.5213898821505021, 0.6008883090592245, 0.5, 0.6267641496459765, 0.5394252643171357, 0.3973077361896743, 0.02457192917765777, 0.5850707848503929, 0.6534434487746678, 0.822322638023048, 0.18046965417041141, 0.3289222092866959, 0.3014683057617753, 0.5930662649847037, 0.5, 0.5, 0.5035293087254109, 0.28015160372971404, 0.6523596803058516, 0.4206800047353024, 0.5, 0.5089428000891388, 0.6224328254303217, 0.00958293707434064, 0.5062520760898475, 0.6367669314663248, 0.7302071455257322, 0.4004815236863494, 0.532371261684254, 0.5, 0.5630466464750657, 0.6070101450384254, 0.9131894819368295, 0.5, 0.29551908323508247, 0.4731512199998652, 0.8786437927831596, 0.6368713655639954, 0.4633985228586241, 0.5, 0, 0.48253561175173737, 0.5, 0.6381078099705225, 0.5, 0.9349809717590698, 0.2828559742989725, 0.36332792379595086, 0.42347932599430044, 0.20566735601108155, 0.40038217033257284, 0.6194641830943117, 0.5, 0.5, 0.5550989711965336, 0.8045849903879245, 0.5054488041412342, 0.44347307427226196, 0.7851351179032504, 0.944204303441905, 0.45844313594748687, 0.44891592570325034, 0.31088353379900696, 0.7536606822291736, 0.4095554905735011, 0.7502341423388262, 0.5248045200237809, 0.5017213911766982, 0.6851085518837386, 0.5560752215722167, 0.35949200268735365, 0.5, 0.4685806089211233, 0.5, 0.5, 0.559085212076453, 0.7498141087317721, 0.22790014228967137, 0.5042413717182668, 0.18869879010313018, 0.5275533540993282, 0.36123740061108467, 0.6345679552131058, 0.6667953048329665, 0.5437177981737434, 0.467014488334925, 0.3067329330168408, 0.5128902309831086, 0.23150642716054715, 0.7015748188162034, 0.5043345664305325, 0.2678082210499365, 0.22592826170106678, 0.5, 0.37163571904648973, 0.2915327171358205, 0.38103506810133597, 0.47000188350900424, 0.5510360138528072, 0.3843519933623374, 0.44696860973170904, 0.45243332883753784, 0.4253479203937441, 0.8098030688772562, 0.6874637512262336, 0.7231272829159451, 0.1292012468697352, 0.00374354883885053, 0.5, 0.3641248040559264, 0.4720430315408782, 0.3923693168545304, 0.5, 0.5869172387006388, 0.7586282642036926, 0.5190358653001608, 0.6138836218149095, 0.09284357426197763, 0.9615244822803255, 0.5, 0.366455783492083, 0.4053144330841851, 0.5, 0.45592047430583216, 0.5, 0.5, 0.7521244474038364, 0.37345899633428753, 0.5, 0.3798985434051295, 0.6032656790884314, 0.47099035298800684, 0.8508401532465097, 0.40630749597390037, 0.5, 0.7349133829234102, 0.8573748837842463, 0.5, 0.49158152481302775, 0.2518122276851613, 0.3570256770284455, 0.5, 0.3993429612375849, 0.6425706312505758, 0.3515550462793625, 0.5, 0.7716463541611795, 1, 0.4162607146370054, 0.16319199355285044, 0.34971674552841303, 0.6223266062870422, 0.34153661688648185, 0.2751147681372317, 0.3117675079210466, 0.5273261801979043, 0.9230074442477969, 0.5, 0.5, 0.4339813317422263, 0.4798530977469576, 0.9291362246051083, 0.6081486653293262, 0.5, 0.7658689329630979, 0.7063947227141356, 0.746271936438183, 0.3147932791011826, 0.4741712425581661, 0.5768688729482193, 0.04392881539170845, 1, 0.3368900340801584, 0.1815747610823521, 0.5, 0.5304968689748623, 0.5469693299774001, 0.42450955239342714, 0.29743606838994385, 0.9123176353965159, 0.589915960254558, 0.5805812217769807, 0.5, 0.6401633034247828, 0.29012880750391984, 0.516394670133039, 0.5, 0.3142391370391125, 0.09328510104068077, 0.9823326375078119, 0.26898621088539554, 0.1674470643568843, 0.36585205344352445, 0.5, 0.5, 0.42794153584405975, 0.8516350492279694, 0.3474303840733995, 0.5, 0.729090075827818, 0.8092428790876588, 0.5, 0.4626445892887601, 0.6048644805060595, 0.21252177913513215, 0.36407494044650635, 0.4156197375925209, 0.40192652685039176, 0.7318538206484864, 0.6807070461588259, 0.16852984943704755, 0.6269236401963396, 0.5545110010341854, 0.7623526343774636, 0.9840124184247929, 0.2891408966392363, 0.3747932820392076, 0.36857282097375177, 0.46929538338371746, 0.8630510551132483, 0.4170436709532914, 0.47256183907486266, 0.5855674670426226, 0.31119264826305715, 0.44135831678548976, 0.7766505396781347, 0.7992396765259061, 0.5, 0, 0.269745571249064, 0.973266507941362, 0.5, 0.11377016412263379, 0.6505917422414761, 0.36540722677512916, 0.5, 0.24199074932258685, 0.5888650309353186, 0.12310397083149577, 0.8996223224731901, 0.5, 0.6591601018356095, 0.5, 0.9496743786501687, 0.18816928979237627, 0.5116017765503739, 0.6693183079266105, 0.5426294361626426, 0.9017992304398725, 0.4826398592899107, 0.5467073820975827, 0, 0.6133633162301971, 0.04162496882043304, 0.5, 0.9088274077020366, 0.35486698224185076, 0.5, 0.32931136152592033, 0.9155867235043733, 0.08739751777987, 0.47312073374891245, 0.37345932735153425, 0.8248502869724141, 0.5, 0.6437242681566651, 0.24409961763411914, 0.5, 0.14880494097436245, 0.23541940405367034, 0.5, 0.3272352199651119, 0.5157162432008182, 0.226091195139602, 0.582347694689641, 0.4101836754347381, 0.2127434837361905, 0.5898890223851825, 0.5, 0.3212027253061027, 0.250565037001444, 0.7315166337868048, 0.4564655085991196, 0.6530987991084566, 0.5, 0.511273101683518, 0.5, 0.2626227430982451, 0.5, 0.6960916518838081, 0.5, 0.575580786973285, 0.5, 0.5520737473740107, 0.6874888990564798, 0.5718868834240962, 0.5, 0.4605303978467733, 0.5680151272930336, 0.530260367325561, 0.5, 0.5860128164815395, 0.2274428841235196, 0.6293229019263274, 0.3344651556347549, 0.3941227854123273, 0.3021681339976876, 0.58660073320507, 0.5831192359490325, 0.695043865001544, 0.8878924385004212, 0.6062046517383736, 0.6953895888544288, 0.24628832375053683, 0.5, 0.3260935388225297, 0.44454594530396474, 0.5, 0.5315129821964885, 0.5, 0.5049574212411864, 0.21515078961734435, 0.4042605647800588, 0.5, 0.48829033972853897, 0.7207507080144725, 0.11443997487696164, 0.3808929080603063, 0.4860896523635793, 0.5387262882710089, 0.5405342703721072, 0.5, 0.5400383616321837, 0.36089738875062055, 0.542214353308903, 0.2563380526455202, 0.5510294711068571, 0.9730242953116466, 0.6508372977600205, 1, 0.5370656214000453, 0.49809876614482956, 0.9140975799011541, 0.5735547346090774, 0.6035682043164883, 0.31378480773776907, 0.2702829024494713, 0.9224453555470484, 0.42183511295794823, 0.40402581856589803, 0.19207811161323568, 0.832714193825252, 0.09830805089860693, 0.7349479367512753, 0.4896572819556949, 0.9021949797614897, 0.4150143197253544, 0.44965732614384496, 0, 0.7274497191479172, 0.48662426921030894, 0.5650832507593008, 0.393340165000857, 0.7260867401700909, 0.6332792189958591, 0.5, 0.8502204604338665, 0.6539762586671872, 0.3794749109256126, 0.6378187082476124, 0.3645513446936023, 0.7300950248312579, 0.5620294123212457, 0.5730655319850086, 0.5631894525881903, 0.9326123821435308, 0.7559844888373665, 0.5988606927537515, 1, 0.5, 0.44973352034589903, 0.5913712651953105, 0.53749106373319, 0.3326899427437934, 0.4962333118817362, 0.5979615471460711, 0.5, 0.6316607143680186, 0.8451302319061427, 0.7945652951060065, 0.7680783118920584, 0.292134333613197, 0.6908751083539622, 0.46347853247696347, 0.39588459782812874, 0.4389593321306419, 0.5867738249932994, 0.2956633714263357, 0.42035225024239226, 0.5065347911271326, 0.41297032694083724, 0, 0.5428338937475459, 0.41835030354514824, 0.3553013207524153, 0.5, 0.3891064746768185, 0.6452695332220916, 0.47189168843768386, 0.44894391653169874, 0.27953124716441335, 0.2244187216217008, 0.5, 0.4004664773080263, 0.5797171353226075, 0.7329464355760512, 0.2700128790800769, 0.37660374841504757, 0.5, 0.431701684177718, 1, 0.5, 0.5, 0.5, 0.9986741045904889, 0.1913376633459693, 0.5499273487681483, 0.4886389448315447, 0.607723858120738, 0.7167448395316357, 0.8108147893214143, 0.5, 0.1271657254216334, 0.5892688882427448, 0.7722839887487862, 0.145883434508521, 0.29085526788483346, 0.037257150300775865, 0.5504779741149073, 0.7258929028675007, 0.0785530732489998, 0.23949856492334273, 0.4063858941261964, 0.3528941562853434, 0.5, 0.6549878887385584, 0.19037523886213803, 0.31939340032953795, 0.6174989705237264, 0.4173846721921055, 0.5, 0.10423428327457088, 0.35485489309108587, 0.5, 1, 0.5383879366059424, 0.3027403418512966, 0.5, 0.5, 0.6401812454592464, 0.567535113048529, 0.5, 0.982527134464166, 0.3485271668367831, 0.5, 0.706836022138933, 0.5, 0.768433744295007, 0.45293168093035885, 0.2080603313387279, 0.5, 0.6072012204053868, 0.5544526387018196, 0.37649882786773775, 0.6628589990873924, 0.5569075109413834, 0.7552657924817829, 0.6048470569791363, 0.6502318915047757, 0.3805896635620375, 0.6074619783418373, 0.8479876048506159, 0.4594326001455249, 0.6955554865665224, 0.22745721753425158, 0.5, 0.23919596557725137, 0.24789558912201987, 0.3160605107786116, 0.6651382992533819, 0.47656176559858243, 0.5086305087156752, 0.5597752588964406, 0.5, 0.2632548348814303, 0.6958438958050719, 0.40848596680949406, 0.8496512850345495, 0.26541259451063676, 0.9960109385487071, 0.5, 0.2012999654451219, 0.5, 0.4657786008287017, 0.7475105711231518, 0.6820003075667119, 0.15772486013759862, 0.4137283835010449, 0.5, 0.7298247678898315, 0.9905776766219445, 0.8839243060752581, 0.5895390491267216, 0.7183528819928412, 0.6176373868474375, 1, 0.774485678837762, 0.6954416815367593, 0.5102660913126886, 0.5770551043323314, 0.549159255211355, 0.4425057491269363, 0.5485106666529463, 0.40343291320521907, 0.5, 0.4748189474270022, 0.4341218274459198, 0.6702867430327368, 0.7472452522796083, 0.2989672470666938, 0.700625996517131, 0.25558095130920466, 0.6763429135235454, 0.40256416042420773, 0.4127753506755056, 0.41533962534861424, 0.024586506064901904, 0.8384528285267082, 0.30302129544017564, 0.9164178129541156, 0.46770460211632076, 0.345516812535518, 0.48266945972069647, 0.8174764787294211, 0.2744333000969231, 0.21213733291190806, 1, 0.6960188020697807, 0, 0.12250088017449833, 0.5, 0.1795532668571192, 0.64271269388055, 0.5, 0.5244384847444448, 0.5528779349117589, 0.6288019671129758, 0.3610150718466003, 0.15958366322489265, 0.7351316517280171, 0.4564279586711337, 0.7270425306726134, 0.5, 0.566963229564389, 0.5, 0.4336985910181872, 0.47925219442432976, 0.2843358752376285, 0.4842467147632884, 0.40946234949209637, 0.20167852121954197, 0.4152882665947138, 0.664174947903734, 0.9593345351475491, 0.5, 0.9150395646315385, 0.387736081517543, 0.2649062873224271, 0.39200918453247885, 0.6497003351826712, 0.17115034297532322, 0.4298332522549346, 0.5404237929816927, 0.7947123764736105, 0.49978967519069806, 0.39941311424025183, 0.23378547104147346, 1, 0, 0.9827738791605103, 0.2879683714421609, 0, 0.10792441568802452, 0.5, 0.7274143614078694, 1, 0.36331054146815844, 0.27399656809826445, 0.5984396845547153, 0.9512218886584163, 0.5, 0.6968310101644339, 0.16106820900880364, 0.807572953319705, 1, 0.7597937870899353, 0.743067656904269, 0.8491011820852976, 0.5325916921208492, 0.403007421645716, 0.6630925835890638, 0.26609856500610485, 0.5255435338378641, 0.5282144442463707, 0.681307974976725, 0.5068085008093355, 0.5, 0.6293111090336958, 0.47376576370795515, 0.39644947934186453, 0.586167792091746, 0.8218733386222572, 0.5721408646929348, 0.5, 0.5, 0.564919919277031, 0.5048553179548805, 0.5, 0.7959589097688442, 0.15431264378597667, 0.8432496812987565, 0.5255040062046409, 0.28378992272415693, 0.5, 0.5442600322908488, 0.34468493945044515, 0.5, 0.5813577351641507, 0.43694272522857325, 0.2164980812166189, 1, 0.5318544205178781, 0.5, 0.4738599824239923, 0.03445158907252818, 0.4180916204056319, 0.287195189739585, 0.5, 0.7247667920958958, 0.5, 0.4817298635328097, 0.5320404042530333, 0.36667947308829085, 0.5, 0.30567404436184886, 0.42858714169601264, 0.3265323074387837, 0.8857073957114343, 0.8625098783555141, 0.7099640333520851, 0.5, 0.9035194498436453, 0.7680411620710889, 0.6052286608576214, 0.47117754041885024, 0.8707711950601211, 0.44541158368553546, 0.5, 0.4035236746256784, 0.4481233451871457, 0.258208725709325, 0.5, 0.4870064510261112, 0.5, 0.5041750799970757, 0.7065232199650073, 0.5, 0.47704134326023956, 0.5687159893441215, 0.5, 0.9820721355681389, 0.3063167906732827, 0.5635033739515414, 0.5967390121165482, 0.20346710602817494, 0.7985394958341266, 0.4192627573962671, 0.5962259168133344, 0.6511358382798781, 0.5, 0.4625244409661919, 0.5036822091862723, 0.2744849029376103, 0.6425728489238034, 0.6832474109701869, 0.3654903211727399, 0.5280480561861204, 0.7675629416532752, 0.5794976402075047, 0.6111300427368558, 0.18926612866676207, 0.833401950165194, 0.29496149279773226, 0.47432647621102625, 0.5, 0.6510734898554472, 0.6428209153884272, 0.5, 0.6041021312805812, 0.40068850314446114, 0.6829078838293825, 0.39972963627953867, 0.433901037903562, 0.35551281138216356, 0.13588594116617017, 0.06202112525751502, 0.5414711864364223, 0.606372659238096, 0.5, 0.9259458799528341, 0.7215221740876351, 0.5, 0.6393240417407123, 0.7948173218144279, 0.30905197749732827, 0.3640368996063069, 0.35816055986362294, 0.5555631750119274, 0.869681338033742, 0.5816304069388253, 0.41385585338234404, 0.41780302935017144, 0.25818868931105, 0.4467199097310055, 0.7831888014647702, 0.44849804655439146, 0.6384190427343885, 0.7424922209453397, 0.6686246523434386, 0.8005217352746037, 0.7500167623937175, 0.4405981387885918, 0.5111316744525596, 0.373171076427308, 0.518872135799541, 0.14560328300903558, 0.5, 0.5, 0.9779497324130063, 0.5807136179932865, 0.0007457765700594199, 0.718560879111987, 0.7918989539200783, 0.5, 0.6984743225965973, 0.4879397295262264, 0.35950375006539553, 0.49385482176579487, 0.6805015201429869, 0.19839561609228396, 0.6328039940548307, 0.5, 0.43217817309292844, 0.3722449594898328, 0.29980197941855746, 0.5162408704087961, 0.21887696887715263, 0.5895559932313552, 0.23587143212554756, 0.5152703835308083, 0.8367942319747259, 0.6663796388202459, 0.5, 1, 0.2061948311322464, 0.6402925924517074, 0.5189615181104629, 0.7516456723528926, 0.4791659011773659, 0.8402102895855634, 0.3542298739149762, 0.33632735018030097, 0.05098254648095626, 0.51265462142921, 0.4191740014187061, 0.6688910613998996, 0.07294793557571383, 0.5569150219300252, 0.6324502747183672, 0.4738932425604525, 0.39805558994385887, 0.5, 0.03636996726410077, 0.5235307960756026, 0.5947049260217206, 0.47749115922296825, 0.9264408825032807, 0.44793005258924834, 0.5, 0.43981413303518124, 0.4086579641755329, 0.5748180763006531, 0.7681891683379856, 0.5, 0.7818650619059877, 0.5136768660402407, 0.23072667965303179, 0.42700099072653697, 0.5168813327750699, 0.8224904945240266, 0.40467642957346317, 0.5, 0.5, 0.3988050429567436, 0.3710613338329683, 0.5783671700308753, 0.11616042696041018, 0.4242012436311051, 0.6401470073135759, 0.5117511022868056, 0.5, 0.5, 0.8700592056157923, 0.22431165055517244, 1, 0.6704569739502942, 0, 0.8593827275015153, 0.5759440499126963, 0.6558596129779056, 0.6330484776949015, 0.3190123134633696, 0.7883894711655555, 0.45974565752827345, 0.48647508502554254, 0.5435209596308362, 0.7170100484730221, 0.30494776351872865, 0.789711912865502, 0.5376759197431638, 0.6046827404040449, 0.6611474455685495, 0.43943724468388845, 0.6587258037871957, 0.6365203621252793, 0.623469256777789, 0.5080361053949162, 0.3454421691401851, 0.35885046529588965, 1, 0.4747541657032575, 0.9654931814307884, 0.37117855030163327, 0.27553204249972046, 0.8771774300457678, 0.3724616711911821, 0.5, 0.510931766269798, 0.9801707860280815, 0.7349785364731565, 0.5302838301841897, 0.7075800158243795, 0.12778487262132573, 0.47020462601399515, 0.5079774388113433, 0.6696894623015511, 0.5881932703597332, 0.18091148591054146, 0.4648105486069198, 0.4375183765721645, 0.6262446176055384, 0.5287485690018562, 0.5230050737009952, 0.3141931672435291, 0.5454826522525329, 0, 0.3922438714820937, 0.9184977229606999, 0.6492900026340758, 0.7924030840810958, 0.5, 0.5483513263594131, 0.7777044397315264, 0.7303702839201627, 0.3766139506948891, 0.8458339105852106, 0.5, 0.3247283153948679, 0.7975931143647875, 0.5, 0.15569812243276784, 0.372509241466689, 0.5718850753444784, 0.3943037490355271, 0.21661399268608872, 0.6563576717363767, 0.4475955937100944, 0.3769442530693905, 0.5, 0.3881550532572785, 0.3023174680370059, 0.5781529662038234, 0.5, 0.5, 0.4884998503729034, 0.6328607398160744, 0.3585303252106151, 0.4043124533171218, 0.24563136907052216, 0.736531240539053, 0.5265657313697413, 0.5, 0.7719070979480783, 0.3811166556375902, 0.3980341544041108, 0.4470401507552214, 1, 0.558055651880952, 0.578945812001247, 0.4778470318480973, 0.5, 0.3064340278277888, 0.5806590239681377, 0.4602207600644271, 0.5, 0.5792730013358234, 0.6608921917894516, 0.36296765424272537, 0, 0.17015914628220585, 0.37058224368330744, 0.5, 0.5733716811267158, 0.46130614451997426, 0.6019244074198955, 0.642002609439832, 0.5852150458568449, 0.5108455996534871, 0.6696288210879515, 0.47052083126610406, 0.6441984358785092, 0.5047271631044914, 0.5668850381561752, 0.3698072245988468, 0.11735074152978936, 0.39703683109224835, 0.5109408742821634, 0.5910170895845794, 0.5557480768981413, 0.13786742134502333, 0.5089373818964393, 0.5834192338103746, 1, 0.46561588848337476, 0.26382404364563083, 0.7269012322521051, 0.5955649391350617, 0.770294247044902, 0.5011148424700012, 0.9263545009833843, 0.5659911663629942, 0.44153328936558944, 1, 0.6985938724683629, 0.41908557836312205, 0.5, 0.4210355638648988, 0.763802685371342, 0.5548394025026862, 0.22102748372430991, 0.5223094994095169, 0.4933121131144569, 0.39455765774026536, 0.4161048751093438, 0.2108884059655443, 0.6186645620142412, 0.5, 0.3266109934562646, 0.4350123397908683, 0.33229660151699814, 0.9896789289065723, 0.6066855480569404, 0.5, 0.6019603918588267, 0.6271952099595592, 0.6997364837319411, 0.5, 0.7011132283579754, 1, 0.414401381207775, 0.7329655777608425, 0.6388964331114964, 1, 0.6201483186119493, 0.4411261741957969, 0.36107995077941835, 0.6398464387118802, 0.6362905243759526, 0.5319808735659668, 0.9264746666144208, 0.8218073343010077, 0.5282017969624979, 0.5320684346057496, 0.5, 0.5560359927714368, 0.9157205835400231, 0.5, 0.35284824264565867, 0.033679762617518344, 0.38230323683539924, 0.7565039163846151, 0.44764425725466184, 0.5005396263408107, 0.471866612302001, 0.8427842074958763, 0.6385431497453359, 0.5, 0.5387866345307512, 0.25868957854040736, 0.18207522088605366, 0.7047740931200358, 0.6719702491938033, 0.5, 0.9195110795380681, 0.5, 0.49805433247778236, 0.42048086856010664, 0.3390425219694733, 0.35128541970753047, 0.23646351617765898, 0.7160124533496807, 0.5920141348258838, 0.3556415696313921, 0.4501799035348966, 0.3524353125799974, 0.9587616202566297, 0.20040123308825758, 0.4096570558042927, 0.23010517392026344, 0.5820046471956279, 0.5981350043084902, 0.672295964740737, 0.5942925088476751, 0.31984765083414163, 0.5, 0.5, 0.037431276219614396, 0.7646229142628493, 0.5, 0.35656852372475056, 0.5, 0.28102968798795924, 0, 0.5, 0.5026301945965342, 0.5, 0.5273147248332644, 0.5173110166686968, 0.5193320773575768, 0.5154492652110971, 0.4962281837674231, 0.5788319518725519, 0.26651103392841835, 0.49543165238947434, 0.7121615167109653, 0.44175503730461113, 0.6251428247792188, 0.507599524301237, 0.3214464503966683, 0.15511710527330808, 1, 0.6012277798889376, 0.2987149273453126, 0.5, 0.5777577213802296, 0.5642834376646417, 0.9203520931104119, 0.7343456601693109, 0.3789997749503181, 0.3191057983567641, 0.8129640356766891, 0.7397440602678821, 0.45399359500769604, 0.46804869086958956, 0.19484379330093488, 0.44134058474288573, 0.7615405857596222, 0.5469327561144326, 0.4156321427377363, 0.5341914388633864, 0.6828727929255709, 0.5, 1, 0.19021912424729734, 0.4967040369559652, 0.9860392571711849, 0.48119656356274776, 0.50065120165881, 0.8562765632244522, 0.4878378561131179, 0.12486560968019589, 0.5363741407273518, 0.8822046777432118, 0.7827292180827159, 0.6419421695360851, 0.4810121687045762, 0.5632693826425573, 0.5817004346110446, 0.5, 0.1598686101493076, 0.4493945522169636, 0.44477256632757295, 0.6198933412744174, 0.47309713989064245, 0.4102200964543796, 0, 0.0021184167924071795, 0.6943994132632791, 0.48399286381287265, 0.26531345133391515, 0.6393702497146038, 0.6700854894549803, 0.12842085929074654, 0.5, 0.8052134977271792, 0.6155130709819876, 0.5955478021863265, 0.5387621768240476, 0.5, 0.7191158472761643, 0.6295106465393352, 0.7045923166545569, 0.4771874282046469, 0.23410085878083506, 0.24661345200335022, 0.40478256005428254, 0.8758622745051224, 0.9450413787244626, 0.4444659373387271, 0.4517852307306844, 0.0965609193654195, 0.47850236810614677, 0.7056363027867171, 0.42698080867696653, 0.7907424184075121, 0.844640670339017, 0.3871289107852528, 0.6643112209628341, 0.5, 0.31820167720158754, 1, 0.4423471770641109, 0.3973764959916937, 0.41558004781305036, 0.3297468562207381, 0.6750797438038988, 0.22533550846945832, 0.28133330932966405, 0.4148890752060578, 0.448335000199272, 0.3534847126204192, 0.596086675387586, 0.5886850172861072, 0.46168302087104407, 0.45139426982015646, 0.1917320723602705, 0.49490896666613243, 0.49967644398071964, 0.4896722591904795, 0.6509206644132312, 0.23295541794664384, 0.507209467145913, 0.5, 0.5667661062020972, 0.6315950195324567, 0.4766126506881462, 0.2056461879723593, 0.5, 0.5080360847700527, 0.6128135120092546, 0.5, 0.6128199517683786, 0.322529844637118, 0.3285830387411507, 0.5, 0.6964037020823942, 0.2983905711736793, 0.5362574754016891, 0.7457101349457458, 0.8356457032842137, 0.44526216489986753, 0.48179700943505227, 0.7297853544865318, 0.5, 0.5, 0.5, 0.5, 0.36941770408260904, 0.8274371521608556, 0.5897371985499583, 0.37937722077748187, 0.49615532354029157, 0.382482123895891, 0.630120409283558, 0.8763745521189403, 0.35617972635347617, 0.1194754768000384, 0.5, 0.3145816036001339, 0.13612515746260273, 1, 0.29579655568253727, 0.40733447047795024, 0.6007170600721596, 0.32024912605093814, 0.5, 0.6103013617826449, 0.18361579457806942, 0.4787249177151016, 0.5, 0.5, 0.4745577481014059, 0.667800125058882, 0.2720191627045745, 0.5, 1, 0.38104424619880617, 0.5725032190494772, 0.7240697144604482, 0.650010712498713, 0.5, 0.3874207479686565, 0.5, 0.5, 0.04419236822808737, 0.6261844011328962, 0.5509772732124139, 0.29375770973476567, 0.9630999316257496, 0.3539376172480979, 0.29156541191144986, 0.5, 0.5879307824368744, 0.6480739894678069, 0.5, 0.545715200186093, 0.5, 0.5, 0.6489029738047786, 0.5, 0.2836754569763242, 0.4969624320122466, 0.3108821138272362, 0.7443029461679467, 0.6346467071717187, 0.41734296514211433, 0.866354101254275, 0.5914581622541324, 0.36708595753890977, 0.5, 0.5, 0.0025021870538757818, 0.8061092715382727, 0.5330254759452159, 0.5, 0.5, 0.5, 0.6210310312590304, 0.8664101667319483, 0.588356144568809, 0.30459277458532186, 0.495616943605259, 1, 0.13177528775240918, 0.5, 0.2355440616480001, 0.4513066312687738, 0.6386546852224614, 0.8383646774338525, 0.5, 0.3051978508746179, 0.8913770846824074, 0.5355256141470864, 1, 0.39899782200045836, 0.7420454959294783, 0.6289855413928778, 0.7334373808066547, 0.07308552018005954, 0.8984193468092446, 0.7291325242733013, 0.6499732360600361, 0.6349167364284365, 0.4570220562939679, 0.2876015031078042, 0.5292845488972483, 0.5, 0.8143661654556077, 0.7298179630603155, 0.4949299519814848, 0.5283713366455195, 0.7760522890379729, 0.4962136311641059, 0, 0.39000975692739825, 0.6223179427173533, 0.3385547795431064, 0.13575644619261318, 0.6099713807810958, 0.197496984023293, 0.5, 0.6432340371142987, 0.35068389130150057, 0.9377074227662383, 0.6994763432003753, 0.4619837991410023, 0.985786337831505, 0.26556621144943565, 0.7446721971307967, 0, 0.3652491382493467, 0.27935456153756766, 0.44688150194259757, 0.5, 0.7187310708055377, 0.6118620924463627, 1, 0.5431091007111202, 0.17717859008083076, 0.592481109552979, 0.7081042115500686, 0.59941088520346, 0.5862912870921688, 0.355415983268745, 0.22227600103384107, 0.6040239132734904, 0.3325321340092165, 0.4933294333703335, 0.49852232907273436, 0.33240388003818566, 0.12758097922714234, 0.21860615174844455, 0.36597542906670133, 0.5866893605482301, 0.31221451773836006, 0.5665776784645837, 0.42491363481049127, 0.8164950335351715, 0.4103724239683255, 0.8161387663877125, 0.5, 0.965932144726982, 0.6168065407219058, 0.3619083010174901, 0.5368643787735201, 0.5, 0.5, 0.5703875175221667, 0.3768281646637546, 1, 0.5913315127446701, 0.13354287596992775, 0.4933755344307348, 0.7547624348410342, 0.48643279366189573, 0.07464383496084523, 0.8316397724010578, 0.22183812236348166, 0.9122092667375583, 0.8253660819470281, 0.5, 0.267112118119159, 0.46671931389101157, 0.6120665303579537, 0.2993383963113305, 0.6365050990653386, 0.4736629746057623, 0.515199896367306, 0.5, 0.5068943672254814, 0, 0.38197834749635295, 0.18587961712681184, 0.7874454223529175, 0.8018979688673824, 0.5952408793000202, 0.5, 0.5625422468649857, 0.5406343486479827, 0.7168005242663534, 0.5319045182676018, 0.6265652569774505, 0.7950025399989212, 0.3933849465020347, 0.5, 0.5, 0.8188597581130127, 0.8616377771939044, 0.32578273588804807, 0.6469132700610465, 0.2676526441527117, 0.6022420221921443, 0.5, 0.7103594330645424, 0.35314597290443583, 0.881920207217975, 0.5, 0.7289197746565811, 0.27546793678594544, 0.13776338575246475, 0.2951534693067726, 0.5752117068574074, 0.5, 0.5, 0.5, 0.8239806740245772, 0.6008726895301184, 0.3909775441062239, 0.4077483299719795, 0.5, 0.6285567546862132, 0.35800059588514643, 0.5, 0.46872056206761087, 0.9775957314705173, 0.1867847632669991, 0.5, 0.6083315694432108, 0.309750825670859, 0.4539069365680961, 0.3983520995025247, 0.6742021476009561, 0.7475604550207731, 0.42420778933209163, 0.5328483741408133, 0.6817506954571577, 0.579520274560055, 0.43233032059679766, 0.5333890123967145, 0.5, 0.499163629273002, 0.7030798678702134, 0.3466141817481865, 1, 0.21107970159088765, 0.7397884159342307, 0, 0.6031481865395669, 0.8017023095059638, 0.5495633950258956, 0.4168082170310117, 0.6855519974300471, 0.5398425901039879, 0.5, 0.2755683395651923, 0.6948565981995061, 0.5, 0.6503784951063701, 0.5392152692109912, 0.3361606422044636, 0.3787471979035156, 0.4217557744916803, 0.6466698706670465, 0.4816591410912592, 0.8142380945192607, 0.527131739526111, 0.5853103606405206, 0.7352501166350586, 0.5067300938865631, 0.5, 0.5, 0.3838599644524801, 0.45406633384290473, 0.4135783384109113, 0.5, 0.21695759598914865, 0.7665565717758207, 0.5011861516570232, 0.2929796172141187, 0.4785926831709465, 0.4908972647574839, 0.5, 0.6062341543211192, 0.5677244294755055, 0.26483012753166263, 0.7779871474435728, 0.5905250442765019, 0.6861579693323875, 0.36947174712446557, 0, 0.23223349545736804, 0.5024015383678775, 0.5820580079085018, 0.20237093635181302, 0.35917405815377845, 0.6981362497551755, 0.5415919163122271, 0.71003816806237, 0.5599475774985061, 0.6638968339669128, 0.8207013044619315, 0.11647244102467891, 0.3101660932130976, 0.3311162865516465, 0.3069958014098822, 0.42424563625644607, 0.6215540358677114, 0.6027744486525204, 0.14135021314824747, 0.2987753375509987, 0.3866640620517705, 0.501654724797041, 0.5, 0, 0.469101330539956, 0, 0.6662479704155602, 0.24143783961655008, 0.2601196000116919, 0.9430290328970383, 0.3438181713807833, 0.5766567693981215, 0.8114789023917143, 0.36104162919993144, 0.31842446438318994, 0.2835401026738088, 0.5138143448034439, 0.43938209571394715, 0.6449108725610484, 0.24321203457621288, 0.6976174711898555, 0.6555931486713752, 0.5, 0.30539416451465845, 0.4865141158998603, 0.8312849566043621, 0.1405490786954208, 0.22840492518124383, 0.2756817344389817, 1, 0.7351765975339095, 0.7741688391144107, 0.34467486334431335, 0.21178460709234573, 0.5, 0.5779984781204491, 1, 0.6012365385635364, 0.35223220057013704, 0.35676582138671376, 0.49231387004063487, 0.6027943506109217, 0.4203424736141034, 0.3325728376393951, 0.44656268991775305, 0.2945110258364039, 0.5, 0.49819294483078536, 1, 0.11462548038915014, 0.2198714334288904, 0.5353610243842478, 0.8438946494608239, 0.3089712478605224, 0.4814060593713199, 0.8345970082095636, 0.5, 0.5387606390687283, 0.5, 0.9540801393313396, 0.390475904266113, 0.15999265101946714, 0.5, 0.8508406809701069, 0.570196315762761, 0.5, 0.5710179418292891, 0.7378512655694469, 0.690816367595826, 0.5325806705872367, 0.6346674561522099, 0.6600424319969558, 0.5, 0.1877061881199415, 0.16447463013212998, 0.5274839429546011, 0.5, 0.2525502970155207, 0.3899703295521373, 0.20893880088347505, 0.5, 0.29242266107570547, 0.20048845474060872, 0.6478235131036952, 0.5, 0.42895462802389955, 0.5, 0.5, 0.4955951625361475, 0.5854716057631967, 0.3056826387809852, 0.24531330164383514, 0.47611528343353, 0.7657216759563141, 0.3570324256624092, 0.3838722949423647, 0.48669224026690444, 0.09628095620877702, 0.8794395746330306, 0.33656655055250884, 0.6042721108957733, 0.20951576198570643, 0.5, 0.5, 0.5722652263311855, 0.4109692231280424, 0.27643860193728315, 0.507643646853358, 0.5, 0.9203729448934093, 0.7900784143606785, 0.7615790530853574, 0.517368655894543, 0.5340236410185621, 0.5, 0.5038854237935229, 0.5, 0.7551461696084739, 0.577400905423441, 0.42097714246911544, 1, 0.5, 0.5, 0.5, 0.7546936360960648, 0.2336501987188998, 0.6834566495402432, 0.4554635432790595, 0.6229007842236324, 0.5805569336083447, 0.8680907432303296, 0.5298131179608923, 0.9807075717600431, 0.29116502027979657, 0.5593952402650242, 0.21825373544306262, 0.5249617266989716, 0, 0.6640137698432058, 0.5, 0.5129729167579062, 0.23257959235271436, 0, 0.8879837448684411, 0.4796315162675775, 0.606309947146868, 0.39334765315507914, 0.30814018295479023, 0.24209900885300123, 0.8315665582769756, 0.24205400175457187, 0.49760651921160115, 0.6806042591180391, 1, 0.6304869122792277, 1, 0.2766778323858858, 0.3595401183989553, 0.4115718088786884, 0, 0.22412246724403834, 0.4647288253562421, 0.6367993559958732, 0.25382889555644517, 0.5, 0.8733427954764061, 0.6798113391814958, 0.5, 0.5, 0.5665571726289473, 0.7460043098619097, 0.14339806492519092, 0.5917981602607, 0, 0.4160296921904968, 0.2686463222392277, 0.5, 0.5, 0.21435449917936683, 0.3756270955321949, 0.5, 0.374949805944315, 1, 0.22163678758973843, 0.42611075259197784, 0.7034293975610362, 0.43995926629484017, 0.8081636589361305, 0.6568964351757225, 0.4391311733946426, 0, 0.7611501867761263, 0.4514513864238874, 0.2783681993620006, 0.4944814121910389, 0.6753102518113411, 0.8392054607449351, 0.5, 0.12658257129543216, 0.7554431890660139, 0.558063237735864, 0.5516427115542463, 0.30223842187712896, 0.7180979733893991, 0.3087113815276402, 0.5270852948597199, 0.541817517960067, 0.21268761278414305, 0.5841415391646858, 0.5243470703387582, 0.3624595486326599, 0.5767967601550386, 0.6019352362069439, 0.505053693179008, 0.7832815942482451, 0.5146304317843406, 0.2597386445646131, 0.2748486172458274, 0.42961206684599773, 0.5, 0.4204373609194785, 0.2697470032682175, 0.6448791851335061, 0.5, 0.5, 0.6520686532697187, 0.5, 0.5, 0.4964983564060818, 0.5, 0.5, 0.27302703710188914, 0.414349998093005, 0.4501927095387932, 0.5216355181277211, 0, 0.7212710668384751, 0.39762905353984107, 0.018747173742424822, 0.5, 0.04833459981825605, 0.5, 0.5, 0.3931797479252838, 0.46617152367273806, 0.14825642472569178, 0, 0.22019046227556432, 0.21389465843124744, 0.23297278906878316, 0.4470567799771019, 0, 0.5413930327607529, 0.5482779769381395, 0.055419460849390784, 0.6776870793803531, 0.4189884136849483, 0.7131540651286661, 0.3900204629296464, 0.4312207559024389, 0.5740067676110119, 0.7467318581152234, 0.5732622608635161, 0.45666883891142096, 0.7642332614229623, 0.6245530151884998, 0.5, 0.687221846861755, 0.1443463794528991, 0.3757077258710037, 0.22286402726244692, 0.5840024626497348, 0.5571392589883288, 0.73494392902497, 0, 0.5, 0.4602529067166711, 0.5, 0.5, 0.5, 0.43844400518651233, 0.4682933559101551, 0.3884593424388587, 0.5, 0.5162839646525432, 0.3781952213497086, 0.5, 0.5413056867580108, 0.29376805243878, 0.5, 0.5, 1, 0.40473532923766803, 0.592580569577867, 0.5360190853942329, 0.45466115191581924, 1, 0.48467183709353373, 0.5384145734796135, 0.5, 0.5, 0.6421988797152858, 0.6314103440569924, 0.32362435557092756, 0.5, 0.8771987473486725, 0.9374624250497704, 0.41929650874621566, 0.601013618594818, 0.7435308766882599, 0.20266431568154605, 0.5, 0.47218988288081215, 0.579260935313621, 0.34096923324527934, 0.7767023807037754, 0.5, 0.4886787092776431, 0.6570978927752478, 0.683440476961226, 0.222247251485146, 1, 0.3482694890292117, 0.25673530111383064, 0.043094944609104444, 0.6181829455699118, 0.6190739997424877, 0.5904501083260761, 0.5, 0.3717028707081381, 0.5999473338040969, 0.30736698162360065, 0.6384645015507712, 0.48798910840026544, 0.8022832276265675, 0.538307531883511, 0.45783680006646454, 0.5, 0.45157858197068834, 0.5, 0.46997406356698457, 0, 0.5, 0.31886803640212047, 0.20113041853958122, 0.5, 0.9332110044727601, 0.3127232643589101, 0.8601356466156568, 0.3989574160197155, 0.7251615124735364, 0.36879824425946695, 0.5947002397435247, 0.683877728313573, 1, 0.5937718215934304, 0.5276103408022642, 1, 0.6557267352771733, 0.35059249299552464, 0.4729200399920055, 0, 0.860861300197042, 0.5799091781326525, 0.9948329529673581, 0.4659485405590387, 0.5728794166881159, 0.4786328257342915, 0.4946783306377028, 0.6516826113497387, 0.25033146667926115, 0.5616899750935156, 0.6600030836228092, 0.45278890074518374, 0.6262192186389671, 0.5, 0.5, 0.576240873184606, 0.49640933481344407, 0.5, 0.08106691218342699, 0.6663139087784546, 0.5, 0.8428215889894857, 0.5139865460609964, 0.5, 0.920902318801244, 1, 0.6843519305057232, 0.3406987104941546, 0.5, 0.9870739643068225, 0.1201644742930663, 0.425173779491631, 0.76823302223749, 0.6202076925571145, 0.29293793337079155, 0.48743187591265125, 0.589852631506881, 0, 0.8808579654068205, 0.3945363069822519, 0.47920281659093505, 0.5815948993668139, 0.4613595172839833, 0.4701329512233092, 0.6853055203238531, 0.466568434678269, 0.5, 0.6149875425536495, 0.5, 0.8020995104289231, 0.7586051174559982, 0.11524181216074494, 0.5226496834503733, 0.342072558706534, 0.26584504031587763, 0, 0.7659633644903229, 0.5, 0.18092035063109219, 0.6503058023906271, 0.9069455364285102, 0.08716553096271598, 0.5, 0.45069839332749584, 0.3914755042092256, 0.776013566342623, 0.8596523095476626, 0.5670476491953212, 0.5555966099063637, 0.9149423419908931, 0.08495044682779507, 0.23031886897874737, 0.3821418092615338, 0.42388651771031594, 0.5646053497575602, 0.6134120997207823, 0.6473357759400272, 0.5, 0.3126753652414673, 0.5213594642630023, 0.8018421896258461, 0.6325225930340005, 0.5, 0.596017951559267, 0, 0.5731814728141768, 0.009770592743109818, 0.5, 0.27836031800667627, 0.7418644594667103, 0.6889654224000631, 0.3495627511339231, 0.20724725334127625, 0.5, 0.34825006204732334, 0.57944705210734, 0.36347349499443266, 0.5271883544987334, 0.5821170211914931, 0.9786052818180166, 0.21569488829455474, 0.9106701691598114, 0.21531771843951159, 0.98904819144012, 0.5080164378635806, 0.4659001163777806, 0.06348068565181464, 0, 0.5, 0.46634142677256446, 0.46462730871036617, 0.49840323166281164, 0.624586539350301, 0.7516509219324312, 0.5, 0.8502857164805621, 0.28141759643923303, 0.5828873739676997, 0.3205633722266695, 0.5135371071533601, 0.3933201682475932, 0.16625954603286305, 0.22644750520329754, 0.47704191693927067, 0.322329175882762, 0.7479403357120847, 0.8983867966470632, 0.47667172247580586, 0.24757729377920684, 0.8282557058542659, 1, 0.9676896913280341, 0.5, 1, 0.6268377269631275, 0.5, 0.10473127610820063, 0.6038181694730491, 0.5, 0.29094106005299175, 0.7024099956400549, 0.5372181569556453, 0.5, 0.7736265582680582, 0.773656216240102, 0.598212075804798, 0.7544163093793501, 0.2989570590181002, 0.714109370011359, 0.5799047099501865, 0.42709960485376675, 0.6737218865377497, 0.5, 0.4073264409509411, 0.8612170566945232, 0.49657672359836247, 0.5020914609342471, 0.442715831219621, 0.12479745315551743, 0.09553374970157258, 0.6972919430170003, 0.6684648964309636, 0.4797397751107466, 1, 0.7364217758925422, 0.5, 0.5, 0.5487974459645569, 0.4183832048458438, 0.39361957651637963, 0, 0.20797860314134237, 0.3590957695125338, 0.5644835327739626, 0.23093520458907696, 0.2901143287292702, 0.3802510471754437, 0.1696891389617898, 0.11694443242051354, 0.27382805003509963, 0.553585978803982, 0.8924706317824842, 0.5239245665491836, 1, 0.42200202795352243, 0.9118912608533147, 0.47424332469320535, 0.6585643568110697, 0.5, 0.3869274958667338, 0.6154195379271797, 0.3468127869179614, 0.4712359518337855, 0.818794811304971, 0.5, 0.26822921453573223, 1, 0.4461999576681629, 0.5505976238865107, 0.5, 0.11753638332870978, 0.30483848570040056, 0.23527063231684864, 0.532613351654521, 0.24391642644283706, 0.27236652929436306, 0.5158679673078204, 0.40969685149169677, 0.7170794162527842, 0.5, 0.23572181177280715, 0.49568393137650346, 0.5, 0.5573523879054239, 0.18286922675096218, 0.3957164797437678, 0.6364239946680003, 0.3143823884137376, 0.6159209843000097, 0.37280702852876596, 0.5, 0.5, 0.5436582366358476, 0.3545690326126929, 1, 0.3530291672542308, 0.4980563632931007, 0.6081031243498354, 0.5, 0.23270069843380964, 0.4828395540956563, 0.4518370025551375, 0.3082309105224115, 0.5240378126202068, 0, 0.45996309993821555, 0.5, 0.2871303308560888, 0.5, 0.16278477597007368, 0.9874489665280158, 0.6474970914060736, 0.5, 0.7308566838811847, 0.28244608169735674, 0.4592839926821439, 0.5, 0.06320106636394107, 0.975955166888506, 0.4840443716161334, 0.9549568319477592, 0.4184223501569258, 0.4956917341392668, 0.360416090258029, 0.24180713883633628, 1, 0.5557687041692217, 0.2209923063117396, 0.435461130285291, 0.2188176469395104, 0.08020719496318737, 0.2708852140408534, 0.5699293496880989, 0.4729500366947225, 0.5, 0.5268154252658053, 0.14990819750993786, 0.39275753231811883, 0.3936586299778561, 0.49375394025873653, 1, 0, 0.3828347501928328, 0.529729597964672, 0.35889867439867884, 0.5000024304998982, 0.5436611898894452, 0, 0.30613045027010877, 0.5, 0, 0.5, 0.5324954516727087, 0.565581014127083, 0.09289196229133515, 0.45931373698060113, 0.6337643567243673, 0.7918327102392089, 0.8538724970990798, 0.3741428354682878, 0.5353506673015433, 0.6548883210563445, 0.1172100059843096, 0.3888930878599909, 0.48668442323377836, 0.3245718622452431, 0.5])

    # Create the swarm object
    #swarm = Swarm_IDCMAPF(map, len(positions[0]), agent_type=IDCMAPF_agent)
    swarm = Swarm_IDCMAPF(map, 200, agent_type=IDCMAPF_agent, rule_order=rule_order)
    #swarm = Swarm(map, 10, agent_type=DCMAPF_agent)

    # Create the renderer object
    renderer = Renderer(map, delay=0.0001, fig_size_factor=5, node_size=100, linewidth=0.5, dpi=100)

    # Create the simulator object
    simulator = Simulator(map, swarm, renderer, display=display, max_timestep=1000, positions_for_agents=start_target_positions)
    #logger = Logger(simulator)
    [cost, makespan] = simulator.main_loop()
    # logger.log()
    # logger.save_to_csv("Logs/agents200_random_32_32_20.csv")

    # renderer.create_animation('Testvideos/agents200_random_32_32_20.mp4', fps=5)
    return cost, makespan
    #return str(cost) + "," + str(makespan)

def read_scenario(file_path: str):
    startpos = []
    targetpos = []
    with open(file_path, "r") as file:
        next(file) # skip first line
        lines = file.readlines()
        for line in lines:
            elements = line.split()
            maybe_id = int(elements[0])
            environment_name = elements[1]
            width = elements[2]
            height = elements[3]
            startpos.append((int(elements[4]), int(elements[5])))
            targetpos.append((int(elements[6]), int(elements[7])))
            random_float = float(elements[8])

    return startpos , targetpos 
        

def profile_func(func):
    profiler = cProfile.Profile()
    result = profiler.runcall(func)
    #profiler.print_stats()

    stats = pstats.Stats(profiler)
    total_time = stats.total_tt

    print('\nTotal time: %.2f sec' % total_time)
    print('Sort after total time:')

    stats.strip_dirs().sort_stats('tottime').print_stats()

def agents400_random_64_64_20():
    # Create the map object
    map = Map()
    # Import the environment
    env = "Environments/random-64-64-20.map"
    #env = "Environments/test_map.map"
    #env = "Environments/warehouse-10-20-10-2-2.map"
    map.generate_map(env)

    # Create the swarm object
    #swarm = Swarm_IDCMAPF(map, len(positions[0]), agent_type=IDCMAPF_agent)
    swarm = Swarm_IDCMAPF(map, 400, agent_type=IDCMAPF_agent, rule_order=[0,5,4,3,1,2,6])
    #swarm = Swarm(map, 10, agent_type=DCMAPF_agent)

    # Create the renderer object
    renderer = Renderer(map, delay=0.0001, fig_size_factor=6, node_size=65, linewidth=0.5, dpi=100)

    # Create the simulator object
    simulator = Simulator(map, swarm, renderer, display=False, max_timestep=1000)
    #logger = Logger(simulator)
    cost = simulator.main_loop()
    # logger.log()
    # logger.save_to_csv("Logs/agents400_random_64_64_20.csv")

    #renderer.create_animation('Testvideos/agents400_random_64_64_20.mp4', fps=5)
    return cost

def agents900_warehouse_20_40_10_2_2():
    # Create the map object
    map = Map()
    # Import the environment
    #env = "Environments/random-32-32-10.map"
    #env = "Environments/test_map.map"
    env = "Environments/warehouse-20-40-10-2-2.map"
    print("Generating Map...")
    map.generate_map(env)

    # Create the swarm object
    #swarm = Swarm_IDCMAPF(map, len(positions[0]), agent_type=IDCMAPF_agent)
    print("Generating Swarm...")
    swarm = Swarm_IDCMAPF(map, 900, agent_type=IDCMAPF_agent, rule_order=[0,5,4,3,1,2,6])
    #swarm = Swarm(map, 10, agent_type=DCMAPF_agent)

    # Create the renderer object
    print("Creating Renderer...")
    renderer = Renderer(map, delay=0.0001, fig_size_factor=15, node_size=12, linewidth=0.5, dpi=40)

    # Create the simulator object
    simulator = Simulator(map, swarm, renderer, display=False, max_timestep=1000)
    #logger = Logger(simulator)
    print("Running main_loop()...")
    cost, span = simulator.main_loop()
    # logger.log()
    # logger.save_to_csv("Logs/agents900_warehouse_20_40_10_2_2.csv")

    # renderer.create_animation('Testvideos/agents900_warehouse_20_40_10_2_2.mp4', fps=5)
    return cost, span

def agents300_ost003d():
    # Create the map object
    map = Map()
    # Import the environment
    #env = "Environments/random-32-32-10.map"
    #env = "Environments/test_map.map"
    env = "Environments/ost003d.map"
    map.generate_map(env)

    # Create the swarm object
    #swarm = Swarm_IDCMAPF(map, len(positions[0]), agent_type=IDCMAPF_agent)
    swarm = Swarm_IDCMAPF(map, 300, agent_type=IDCMAPF_agent, rule_order=[0,5,4,3,1,2,6])
    #swarm = Swarm(map, 10, agent_type=DCMAPF_agent)

    # Create the renderer object
    renderer = Renderer(map, delay=0.0001, fig_size_factor=10, node_size=7, linewidth=0.5, dpi=40)

    # Create the simulator object
    simulator = Simulator(map, swarm, renderer, display=False, max_timestep=1000)
    # logger = Logger(simulator)
    cost, span = simulator.main_loop()
    #logger.log()
    #logger.save_to_csv("Logs/agents300_ost003d.csv")
    #renderer.create_animation('Testvideos/agents300_ost003d.mp4', fps=5)
    return cost, span

def universal_fitness_function(chromosome, start_position, target_position, env, amount_of_agents = 10, agent_type=IDCMAPF_agent,  delay=0.0001, fig_size_factor=20, node_size=10, linewidth=0.5, dpi=40 , display=False, max_timestep=1000):
    # Create the map object
    map = Map()
    map.generate_map(env)
    swarm = Swarm_IDCMAPF(map, amount_of_agents = amount_of_agents, agent_type=agent_type, rule_order=chromosome)
    renderer = Renderer(map, delay=delay, fig_size_factor=fig_size_factor, node_size=node_size, linewidth=linewidth, dpi=dpi)
    simulator = Simulator(map, swarm, renderer, display=display, max_timestep=max_timestep, positions_for_agents=[start_position, target_position])
    return simulator.main_loop()

def universal_fitness_function_with_directed_map(chromosome, start_position, target_position, env, amount_of_agents = 10, agent_type=IDCMAPF_agent,  delay=0.0001, fig_size_factor=20, node_size=10, linewidth=0.5, dpi=40 , display=False, max_timestep=1000, rule_order=[0,1,2,3,4,5,6], edge_weight_encoding = True ):
    map = Map_directed()
    map.generate_map(env)
    #map.update_weight_on_map(chromosome)
    if edge_weight_encoding:
        map.update_weight_on_map(chromosome)
    else:
        map.update_weight_on_map_by_directional(chromosome)
    # map.update_weight_on_map_by_directional(list_of_direction=chromosome)
    swarm = Swarm_IDCMAPF(map, amount_of_agents = amount_of_agents, agent_type=agent_type, rule_order=rule_order)
    renderer = Renderer(map, delay=delay, fig_size_factor=fig_size_factor, node_size=node_size, linewidth=linewidth, dpi=dpi)
    simulator = Simulator(map, swarm, renderer, display=display, max_timestep=max_timestep, positions_for_agents=[start_position, target_position])
    return simulator.main_loop()

def universal_fitness_function_with_directed_map_interpolation(chromosome, start_position, target_position, env, amount_of_agents = 10, agent_type=IDCMAPF_agent,  delay=0.0001, fig_size_factor=20, node_size=10, linewidth=0.5, dpi=40 , display=False, max_timestep=1000):
    map = Map_directed()
    map.generate_map(env)
    map.update_weight_on_map_by_node(chromosome)
    swarm = Swarm_IDCMAPF(map, amount_of_agents = amount_of_agents, agent_type=agent_type, rule_order=[0,5,4,3,1,2,6])
    renderer = Renderer(map, delay=delay, fig_size_factor=fig_size_factor, node_size=node_size, linewidth=linewidth, dpi=dpi)
    simulator = Simulator(map, swarm, renderer, display=display, max_timestep=max_timestep, positions_for_agents=[start_position, target_position])
    return simulator.main_loop()

def agents400_empty_48_48(rule_order=[0,5,4,3,1,2,6], start_target_positions=[]):
    # Create the map object
    map = Map()
    # Import the environment
    env = "Environments/empty-48-48.map"
    #env = "Environments/test_map.map"
    #env = "Environments/warehouse-10-20-10-2-2.map"
    map.generate_map(env)

    # Create the swarm object
    #swarm = Swarm_IDCMAPF(map, len(positions[0]), agent_type=IDCMAPF_agent)
    swarm = Swarm_IDCMAPF(map, 400, agent_type=IDCMAPF_agent, rule_order=rule_order)
    #swarm = Swarm(map, 10, agent_type=DCMAPF_agent)

    # Create the renderer object
    renderer = Renderer(map, delay=0.0001, fig_size_factor=6, node_size=65, linewidth=0.5, dpi=100)

    # Create the simulator object
    simulator = Simulator(map, swarm, renderer, display=True, max_timestep=1000, positions_for_agents=start_target_positions)
    #logger = Logger(simulator)
    cost, makespan = simulator.main_loop()
    # logger.log()
    # logger.save_to_csv("Logs/agents400_empty_48_48.csv")

    #renderer.create_animation('Testvideos/agents400_empty_48_48.mp4', fps=5)
    return cost, makespan

def agents8_fluid_testmap(rule_order=[0,5,4,3,1,2,6], start_target_positions=[], fluid=True, display=True):
    # Create the map object
    map = Map_directed()
    # Import the environment
    env = "Environments/fluid_test_smallscale.map"
    #env = "Environments/test_map.map"
    #env = "Environments/warehouse-10-20-10-2-2.map"
    map.generate_map(env)
    if fluid:
        map.update_weight_on_map([0.5230230989050219, 0.6667896642511406, 0.6238486620851695, 0.597855650848497, 0.5008523630950914, 0.5, 0.6068473423363937, 0.5137492255719069, 0.5, 0.4104354485054283, 0.48141493045248446, 0.5232341678291076, 0.49672019069211226, 0.5, 0.9010671154828778, 0.46924384269748176, 0.5, 0.6663521823923291, 0.4301919262825462, 0.5, 0.17492725545388343, 0.005297436077258827, 0.5297456759908804, 0.5, 0.5912650409725938, 0.4705255441325129, 0.35388744993205334, 0.563904626425159, 0.45548979971792736, 0.5, 0.5, 0.803330979095219, 0.6049983562653282, 0.5, 0.5, 0.3777605908199472, 0.5119942812598018, 0.5, 0.9072458808697685, 0.31966345950154357, 0.5, 0.5733511754419304, 0.793676638214147, 0.5, 0.5091835694584537, 0.5691209940803152, 0.4872953754746227, 0.5527788705733766, 0.5, 0.507427826374751, 0.4161521595431578, 0.26094859005109494, 0.5261477974332852, 0.5, 0.6442578332846339, 0.5266106538534941, 0.7705395379268192, 0.5, 0.41995249844693744, 0.2869052077820186, 0.5, 0.5, 0.5973859909610845, 0.4815792968547816, 0.5, 0.6034458778758054, 0.5, 0.09952180043966241, 0.9594680126261916, 0.10737785822992246, 0.31933491428490224, 0.5, 0.2514921497866194, 0.28232279488924233, 0.5, 0.4888195557709503, 0.628009946708106, 0.5, 0.5029547389319462, 0.5, 0.6974198081005513, 0.060036585861252045, 0.5, 0.4018172615734894, 0.5, 0.6988382900463153, 0.5, 0.8120419134348901, 0.32625641937835004, 0.5, 0.3606619178874718, 0.5, 0.44865226616877074, 0.8195258986733707, 0.1934044197144686, 0.5175487098288246, 0.34855455625324266, 0.5021406077739701, 0.5, 0.45907905395077026, 0.5560414670931414, 0.44524677837094495, 0.5, 0.6476795574661829, 0.5259652451074789, 0.5, 0.5, 0.5, 0.6246425911689139, 0.4808467730606337, 0.5, 0.6021650647947261, 0.6220385717516755, 0.22684048087585762, 0.7663977736371685, 0.6611496718765153, 0.29239080362890035, 0.9015315048978705, 0.31542961894216487, 0.5, 0.26648788138601937, 0.5, 0.5856050925755335, 0.5156046672881043, 0.9360885283941192, 0.8602350062353201, 0.3497749962585499, 0.5, 0.5894275621789291, 0.7136066556115724, 0.406807650627663, 0.421659547031196, 0.5, 0.37172103722311256, 0.5, 0.6118859022116305, 0.8626843569961805, 0.8429297461332685, 0.12417800054163924, 0.49984869792460634, 0.5, 0.5, 0.5882090218779213, 1, 0.5, 0.2840713671713453, 0.546438822500287, 0.5668160998141994, 0.6353059591419841, 0.5, 0.4146737330870584, 0.5, 0.2679685567720206, 0.5, 0.4680876782490515, 0.7074563798733602, 0.6079315522822054, 0.3998404502954185, 0.3574201607563321, 0.5069906225672386, 0.6375992611444073, 0.35739134725844623, 0.4981347088458018, 0.35323245044458557, 0.6302946954345033, 0.5, 0.20035440890124923, 0.5141089200389222, 0.28217748027778733, 0.4938778082244829, 0.7597887143919804, 0.5030636664014038, 0.7703483989721716, 0.5791561113412445, 0.5, 0.5, 0.9213468284297107, 0])

    # Create the swarm object
    #swarm = Swarm_IDCMAPF(map, len(positions[0]), agent_type=IDCMAPF_agent)
    swarm = Swarm_IDCMAPF(map, 8, agent_type=IDCMAPF_agent, rule_order=rule_order)
    #swarm = Swarm(map, 10, agent_type=DCMAPF_agent)

    # Create the renderer object
    renderer = Renderer(map, delay=0.0001, fig_size_factor=6, node_size=65, linewidth=0.5, dpi=100)

    # Create the simulator object
    simulator = Simulator(map, swarm, renderer, display=display, max_timestep=1000, positions_for_agents=start_target_positions)
    #logger = Logger(simulator)
    cost, makespan = simulator.main_loop()
    # logger.log()
    # logger.save_to_csv("Logs/agents400_empty_48_48.csv")

    renderer.create_animation('Testvideos/fluid_test_AstarNoDijkstra.mp4', fps=5)
    return cost, makespan

def agents8_fluid_testmap_INTERPOLATION(rule_order=[0,5,4,3,1,2,6], start_target_positions=[], fluid=True):
    # Create the map object
    map = Map_directed()
    # Import the environment
    env = "Environments/fluid_test_smallscale.map"
    #env = "Environments/test_map.map"
    #env = "Environments/warehouse-10-20-10-2-2.map"
    map.generate_map(env)
    if fluid:
        chromosome = [0.30866304495309005, 0.25771546924859035, 0.5586331438318612, 0.5031470080338598, 0.36338083516566244, 1, 0.8917300726372446, 0.05846834533273573, 0.01289053086059926, 1, 0.27278036992634813, 0.6833072863651758, 0, 0.13168570494181395, 0.4815177779489942, 0.4114814877404572, 0.8034893866090485, 0.46392910010399935, 0.3863417560145527, 0.5811741235721364, 0.7057864168261808, 0.2824128864055136, 0.5217813517545219, 0.028528294499525098, 0.602713869174799, 0.41115750145296437, 0.0015969458036663997, 0.40923251354914214, 0.6590524986187676, 0.43937998935520167, 0.11369829262016612, 0.12941549303797537, 1, 0.28575846682892947, 0.5318848608448498, 0, 0.6698077251215712, 0.8807899267872761, 0.8726950637275428, 0.612752946757984, 0.37731339605720937, 0.25656737750364017, 0, 0.07953818598631995, 0.3679550633718238, 0.7073060975340025, 0.48803902998809945, 0.10644975673681445, 0.5587493313547341, 0.5819373936570507, 0.4274515862366394, 0.4550960623500647, 0.43370140060363915, 0.40543160858545546, 0.2617860189571903, 0.513891987354072, 0.5363967246783181, 0.4220072994421031, 0.09235996825721385, 0.7566807502995568, 0.5019121072400338, 0.9418408351209163, 0.6132341487325871, 0.45246329081508097, 0.5242686816437425, 0.4979225882876773, 1, 0.36246011703917386, 0.5667918446924624, 0.3353501891652471, 0.4870895770807693, 0.4967253349028255, 0.5630126836453297, 0.5843373189625878, 0.44736436973070465, 0.6363554547296474, 0.7148024851010906, 0.11210874351323659, 0.21835412597612466, 0.004965260779071612, 0.9914384414893879, 0.9158400855485949, 0.627859165477652, 0.22161693230470345, 0.04717704716415866, 0.5179021992131275, 0.4955078697257649, 0.5663775257883029, 0.3820425722158869, 0.5121589808643574, 0.7979577050190201, 0, 0.4178919301463475, 0.508759991215776, 0.32847389636667734, 0.7760411115291665, 0.9940799130866783, 0.5328458364170492, 0.38365640711592763, 0.6426793624038072, 0.6397988364369345, 0.809651537346417, 0.5777594300871933, 0.4019200227466367, 0.06588172225637719, 0.5930608486148197, 0.8711696787070384, 0.35287140951172163, 0.062239385196781224, 0.6398658551307214, 1, 0.1721134114161776, 0.44836500009743047, 0.5466722945901759, 0.5997310157818893, 0.3102179337708493, 0.464165663968842, 0.5726411940614594, 0.15700740543836395, 0.5560809471985497, 0.5554287321059365, 0.4725064209874442, 0.3107379895829714, 0.5022823496501021, 0.0900591310477437, 0.03981739355914335, 0.9171652786342379, 0.8517403513907206, 0.406554071594784, 0.654624587111492, 0.4827093205604458, 0.635072644418746, 0.7025837455343021, 0.5732515747201675, 0.7792746873896093, 0.5358313162120023, 0, 0.349883634512266, 0.6499909406700758, 0.6100743665504585]
        chromosome = np.array(chromosome).reshape(20, 7).tolist()
        map.update_weight_on_map_by_node(chromosome)
    # Create the swarm object
    #swarm = Swarm_IDCMAPF(map, len(positions[0]), agent_type=IDCMAPF_agent)
    swarm = Swarm_IDCMAPF(map, 8, agent_type=IDCMAPF_agent, rule_order=rule_order)
    #swarm = Swarm(map, 10, agent_type=DCMAPF_agent)

    # Create the renderer object
    renderer = Renderer(map, delay=0.0001, fig_size_factor=6, node_size=65, linewidth=0.5, dpi=100)

    # Create the simulator object
    start_positions=[(1,5), (1,4), (1,2), (1,1), (18,1), (18,2), (18,4), (18,5)]
    target_positions=[(18,1), (18,2), (18,4), (18,5), (1,5), (1,4), (1,2), (1,1)]
    simulator = Simulator(map, swarm, renderer, display=True, max_timestep=1000, positions_for_agents=[start_positions,target_positions])
    #logger = Logger(simulator)
    cost, makespan = simulator.main_loop()
    # logger.log()
    # logger.save_to_csv("Logs/agents400_empty_48_48.csv")

    #renderer.create_animation('Testvideos/fluid_test_INTERPOLATION.mp4', fps=5)
    return cost, makespan


def maptester(num_agents, env_name, rule_order=[0,1,2,3,4,5,6], fluid=[], positions_for_agents=[], display=False, save_video = False, directional=False):
    # Create the map object
    map = Map_directed()
    # Import the environment
    env = "Environments/" + env_name + ".map"
    map.generate_map(env)
    if len(fluid) != 0:
        if directional:
            map.update_weight_on_map_by_directional(fluid)
        else:
            map.update_weight_on_map(fluid)
    # Create the swarm object
    swarm = Swarm_IDCMAPF(map, amount_of_agents=num_agents, agent_type=IDCMAPF_agent, rule_order=rule_order)

    # Create the renderer object
    renderer = Renderer(map, delay=0.0001, fig_size_factor=6, node_size=350, linewidth=0.5, dpi=400)

    # Create the simulator object
    simulator = Simulator(map, swarm, renderer, display=display, max_timestep=1000, positions_for_agents=positions_for_agents)
    cost, makespan = simulator.main_loop()

    if save_video:    
        renderer.create_animation("Testvideos/" + env_name + "_" + str(num_agents) + ".mp4", fps=5)

    return cost, makespan
